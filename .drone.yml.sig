eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgZnJvbnRlbmQ6CiAgICBpbWFnZTogbm9kZTo3LjkuMAogICAgcHVsbDogdHJ1ZQogICAgY29tbWFuZHM6CiAgICAgIC0gbnBtIHBydW5lCiAgICAgIC0gbnBtIGluc3RhbGwgLWcgLS1zaWxlbnQgZWxtCiAgICAgIC0gbWFrZSBpbnN0YWxsCiAgICAgIC0gbWFrZSBmaXhfbW9kdWxlX2NhbnZhcwogICAgICAtIG1rZGlyIC1wIHNyYy9hc3NldHMKICAgICAgLSBucG0gcnVuIGJ1aWxkCgogIGJhY2tlbmQ6CiAgICBpbWFnZTogcHl0aG9uOjMuNi4xCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBESkFOR09fU0VUVElOR1NfTU9EVUxFPXNldHRpbmdzLnByb2R1Y3Rpb24KICAgIGNvbW1hbmRzOgogICAgICAtIHBpcCBpbnN0YWxsIHRveAogICAgICAtIHRveAoKICBkb2NrZXI6CiAgICBpbWFnZTogcGx1Z2lucy9kb2NrZXIKICAgIHJlcG86IHJlZ2lzdHJ5LmZhcC5uby90dXJiby90dXJibwogICAgaW5zZWN1cmU6IHRydWUKICAgIHRhZ3M6CiAgICAgICAgLSBsYXRlc3QKICAgIHdoZW46CiAgICAgICAgYnJhbmNoOiBtYXN0ZXIKCiAgc3NoOgogICAgaW1hZ2U6IGFwcGxlYm95L2Ryb25lLXNzaAogICAgaG9zdDoKICAgICAtIHByaW1lYXBlLnRlcnJhLmZhcC5ubwogICAgdXNlcjogcm9vdAogICAgcG9ydDogMjIKICAgIHNjcmlwdDoKICAgICAgLSBkb2NrZXIgcHVsbCByZWdpc3RyeS5mYXAubm8vdHVyYm8vdHVyYm86bGF0ZXN0CiAgICAgIC0gZG9ja2VyLWNvbXBvc2UgLWYgL3Nydi9kb2NrZXIvdHVyYm8vZG9ja2VyLWNvbXBvc2UueW1sIHN0b3AKICAgICAgLSBkb2NrZXItY29tcG9zZSAtZiAvc3J2L2RvY2tlci90dXJiby9kb2NrZXItY29tcG9zZS55bWwgdXAgLWQKICAgIHdoZW46CiAgICAgICAgc3RhdHVzOiBzdWNjZXNzCiAgICAgICAgYnJhbmNoOiBtYXN0ZXIKCiAgbm90aWZ5OgogICAgaW1hZ2U6IGRyaWxsc3Rlci9kcm9uZS1lbWFpbAogICAgaG9zdDogbWFpbC5udG51LmZhcC5ubwogICAgcG9ydDogMjUKICAgIGZyb206IGRyb25lQGRyb25lLmZhcC5ubwogICAgcmVjaXBpZW50czogWyBrcmFkYWxieUBrcmFkYWxieS5ubywgdG9ybnZhbGxAc3R1ZC5udG51Lm5vIF0KICAgIHdoZW46CiAgICAgIHN0YXR1czogWyBzdWNjZXNzLCBjaGFuZ2VkLCBmYWlsdXJlIF0K.PEgSV3x6Lh3X5FZEdQ5FX2IbmacBPlkS67GKdkXsAJg